#
# m0    - i
# m1..x - mol
#
#
# func0. Cuts the tail
#
func
  left
  load
  right
  toggle               @mol   # bx=back dir
  len
  split                       # bx=back dir
end
#
# Reset i counter in m0
#
0
save                   @mol
#
# Create big loop
#
len                           # ~70
toggle
eq
mul
loop                   @mol
  #
  # Copy current mol into m1..x
  #
  load                        # ax=i
  smol
  right                       # m1
  cmol                        # m1..x - i mol
  left                 @mol   # m0
  #
  # Step any direction, eat and checks if needed mol
  #
  8
  rand
  step
  #
  # Store back dir in m-1
  #
  toggle                      # bx=dir
  4                    @mol
  add                         # ax=back dir
  left                        # m-1
  save
  right                       # m0
  #
  # We should have free space behind for wastes
  #
  reax                 @mol
  ifp
    eq                        # ax=dir
    join
    reax
    ifp                @mol   # ate something
      #
      # Checks ate mol len
      #
      load                    # ax=cur mol idx
      smol
      mol
      toggle                  # ax=molIdx1  bx=molIdx0
      sub              @mol   # ax=cur mol len
      inc
      toggle                  # bx=cur mol len
      reax                    # ax=ate mol len
      #
      # Cut bad mol
      #
      ifne                    # bad ate mol len
        toggle         @mol   # bx=ate mol len
        len
        sub                   # ax=old code len
        smol
        0
        call           @mol
      end
      #
      # Sets mol head to the end
      #
      len
      smol
      #
      # Compares current mol and eated
      #
      right
      mcmp             @mol
      left
      reax
      ifz                     # unneeded mol cut it
        0
        call           @mol
        0
      end
      ifp                     # needed mol
        #
        # Increase i, in m0
        #
        load
        smol           @mol
        rmol
        mol
        save
        #
        # Checks if this is the end (last replicator mol)
        #
        33
        lshift         @mol   # ax=66 - nop
        toggle                # bx=66
        right
        load
        left
        ife            @mol
          #
          # Loads back dir from m-1
          #
          left                # m-1
          load
          right
          toggle              # bx=back dir
          17           @mol
          save
          break
        end
      end
    end                @mol
  end
end
#
# Cut wastes. The code below is not random. The reason behind
# it, that nop atom should be the first atom in a last molecule.
# Any other molecule must not have it on the beginning
#
nop
nop
nop                    @mol
line
line
line
smol
rmol                   @mol
nop                           # separator id
rmol
len
len
split                  @mol
#
# Food section
#