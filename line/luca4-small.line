#
# m0    - i
# m1..x - mol
#
#
# func0. Cuts the tail
#
func
  left
  load
  right
  toggle               @mol   # bx=back dir
  len
  split                       # bx=back dir
  reax
end
#
# Reset i counter in m0
#
0                      @mol
save
#
# Create big loop
#
len                           # ~70
toggle
eq
mul                    @mol
loop
  #
  # Copy current mol into m1..x
  #
  load                        # ax=i
  smol
  right                       # m1
  cmol                 @mol   # m1..x - i mol
  left                        # m0
  #
  # Step any direction, eat and checks if needed mol
  #
  8
  rand
  step
  #
  # Store back dir in m-1
  #
  toggle               @mol   # bx=dir
  4
  add                         # ax=back dir
  left                        # m-1
  save
  right                @mol   # m0
  #
  # We should have free space behind for wastes
  #
  reax
  ifp
    eq                        # ax=dir
    join
    reax               @mol
    ifp                       # ate something
      #
      # Checks ate mol len
      #
      load                    # ax=cur mol idx
      smol
      mol
      toggle           @mol   # ax=molIdx1  bx=molIdx0
      sub                     # ax=cur mol len
      inc
      toggle                  # bx=cur mol len
      reax                    # ax=ate mol len
      #
      # Cut bad mol
      #
      ifne             @mol   # bad ate mol len
        toggle                # bx=ate mol len
        len
        sub                   # ax=old code len
        smol
        0              @mol
        call
        ifz
          break
        end
      end              @mol
      #
      # Sets mol head to the end
      #
      len
      smol
      #
      # Compares current mol and eated
      #
      right
      mcmp
      left             @mol
      reax
      ifz                     # unneeded mol cut it
        0
        call
        ifz            @mol
          break
        end
        0
      end
      ifp              @mol   # needed mol
        #
        # Increase i, in m0
        #
        load
        smol
        rmol
        mol
        save           @mol
        #
        # Checks if this is the end (last replicator mol)
        #
        33
        lshift                # ax=66 - nop
        toggle                # bx=66
        right
        load           @mol
        left
        ife
          #
          # Loads back dir from m-1
          #
          left                # m-1
          load
          right        @mol
          toggle              # bx=back dir
          17
          save
          break
        end            @mol
      end
    end
  end
end
#
# Cut wastes. The code below is not random. The reason behind
# it, that nop atom should be the first atom in a last molecule.
# Any other molecule must not have it on the beginning
#
63                     @mol
loop
  8
  rand
  step
  line                 @mol
  line
  line
  smol
  rmol
  rmol                 @mol
  rmol
  rmol
  reax
  ifn
    break              @mol
  end
  len
  split
  reax
  nop                  @mol
  nop                         # separator. must be first atom  
  ifp
    break
  end
end                    @mol
#
# Food section
#