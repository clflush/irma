#
# This code represents one digital organism. The meaning of
# it is to have LUCA (Last Universal Common Ancestor), which
# may clone himself, move, eat and dispose wastes. Code should 
# be as short as possible. Organism's code or body consists of
# molecules, which are separated by fake "sep" command. Size of 
# molecule is not limited. The purpose of organism is to find
# molecules in outside world, from which he consists of and
# build (clone) it's own body copy. First molecule [nop,nop]
# is a marker. The same marker should be at the end of main
# body to separate body and food section.
#
nop
nop
#
# Helper func0 to find nop molecule-separator between main code
# and food section. Returns separator molecule index in ret
#
func             # func0
  mols           # ax=mols
  dec            # ax=mols-1
  axret          # ax=mols-1  bx=?       ret=mols-1
  1              # ax=1       bx=?       ret=mols-1
  toggle         # ax=?       bx=1       ret=mols-1
  0              # ax=0       bx=1       ret=mols-1
  find           # ax=foodMol bx=?       ret=1
  axret          # ax=foodMol bx=?       ret=foodMol
end
nop
#
# This func1 try to make a clone of main code till nop molecule by:
# 1. set i=0 and store it in m0
# 2. find nop molecule index and save it to m1
# 3. set m2=food1. Is a last molecule index
# 4. set find limit [food0=nopMol1, food1=nopMol2] molecule which we are looking for and find it
# 5. 5. move found molecule from food section to the end
# 6. inc i
# 7. 7. dec food section length
# 8. set pointer to m0 fot next iteration
# 9. This peace split clone from the tail
#
func             # func1
  #
  # 1. set i=0 and store it in m0
  #
  0              # ax=0
  save           # m0=0
  #
  # 2. find nop molecule index and save it to m1
  #
  call
  retax          # ax=food0
  right          # m1
  inc            # ax=food0+1
  save           # m1=food0+1
  #
  # 3. set m2=food1. Is a last molecule index
  #
  mols           # ax=food1
  right          # m2
  save           # m2=food1
  #
  # loop through main code between nop molecule-separators 
  # and copy one molecule per loop iteration
  #
  retax          # ax=food0+1
  loop
    #
    # 4. set find limit [food0=nopMol1, food1=nopMol2] molecule
    # which we are looking for and find it
    #
    load         # ax=food1
    axret        # ret=food1
    left         # m1
    load         # ax=food0+1
    toggle       # ax=?       bx=food0+1
    left         # m0
    load         # ax=i       bx=food0+1 ret=food1
    find         # ax=molOffs bx=food0+1 ret=0|1
    toggle       # ax=food0+1 bx=molOffs ret=0|1
    retax        # ax=0|1     bx=molOffs
    ifz
      ret
    end
    #
    # 5. move found molecule from food section to the end
    #
    mols         # ax=mols    bx=molOffs
    toggle       # ax=molOffs bx=mols    ret=0|1
    move
    #
    # 6. inc i
    #
    load         # ax=i
    inc          # ax=i+1
    save         # m0=i+1
    #
    # 7. dec food section length
    #
    right        # m1
    load         # ax=food1
    dec          # ax=food1-1
    save
    #
    # 8. set pointer to m0 fot next iteration
    #
    right        # m2
  end
  #
  # 9. This peace split clone from the tail
  #
  17             # ax=17
  axret          # ret=17
  load           # ax=food1
  toggle         # ax=?       bx=food1
  mols           # ax=mols    bx=food1
  toggle         # ax=food1   bx=mold
  split
end
#
# This peace moving randomly and eats any molecule or other 
# organism which is on the way
#
rand
step
join
nop
#
# Calls clone function
#
1
call
nop
#
# Wastes dispose. Checks if body length is too long 
# to cut random peace of it
#
50               # ax=50      bx=0
toggle           # ax=0       bx=50
20               # ax=20      bx=50
mul              # ax=1000    bx=50
toggle           # ax=50      bx=1000
len              # ax=len     bx=1000
ifg
  0
  call
  retax          # ax=food0
  toggle         # ax=?       bx=food0
  mols           # ax=mols    bx=food0
  toggle         # ax=food0   ax=mols
  split
end
#
# Final molecule-separator, which separates main code from
# food molecules. After this molecule follows food section
#
ret
nop
nop
