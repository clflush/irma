#
# Makes cloning of organism. Takes all commands from the
# beginning (replication segment) and till "nop" separator 
# and find them in food/elements segment. After that copy 
# found commands in food/elements section into the organism's 
# tail (after food segment). After that, splits tail and 
# replication segment calling "split" command. Requires 6
# registers (0,1..4,5).
#
func             # func 0
  #
  # Finds separator offset between replicator code and food
  # and tail offset
  #
  1023           # ax=1023    bx=-1
  toggle         # ax=-1      bx=1023
  6              # ax=6       bx=1023
  add            # ax=1029    bx=1023     (1029 - nop command)
  toggle         # ax=1023    bx=1029
  -1             # ax=-1      bx=1029
  toggle         # ax=1029    bx=-1  
  find           # ax=sepIdx  bx=-1
  toggle         # ax=-1      bx=sepIdx
  len            # ax=len     bx=sepIdx
  toggle         # ax=sepIdx  bx=len
  push           # ax=sepIdx  bx=len      (regs: 0,1)
  shift          # ax=?       bx=?        (regs: 2,3)
  #
  # Loops through replicator code and copy it to the tail
  #
  pop            # ax=sepIdx  bx=?
  toggle         # ax=?       bx=sepIdx
  0              # ax=0       bx=sepIdx
  toggle         # ax=sepIdx  bx=0
  inc            # ax=sepIdx  bx=0
  loop           # ax=sepIdx  bx=0        (ax-code len, bx-code index)
    axret        # ax=sepIdx  bx=0        ret=sepIdx
    push         # ax=sepIdx  bx=0        ret=sepIdx
    eq           # ax=0       bx=0        (ax-idx of cur cmd to copy)
    push         # ax=0       bx=0
    find         # ax=findIdx bx=0
    push         # ax=findIdx bx=0
    retax        # ax=1       bx=0
    #
    # If instruction is not found
    #
    ifz          # ax=0 - not found
      pop
      pop        # resets stack
      ret
    end
    #
    # If instruction is out of food segment
    #
    shift        # ax=?       bx=?
    shift        # ax=sepIdx  bx=len      (regs: 0,1)
    toggle       # ax=len     bx=sepIdx
    axret        # ax=len     bx=sepIdx   ret=len
    shift        # ax=1       bx=0        ret=len
    pop          # ax=findIdx bx=0        ret=len
    toggle       # ax=0       bx=findIdx  ret=len
    retax        # ax=len     bx=findIdx
    dec          # ax=len-1   bx=findIdx
    toggle       # ax=findIdx bx=len-1
    ifg
      pop        # resets stack
      ret
    end
    #
    # Moves current instruction to the tail
    #
    len          # ax=len     bx=len-1
    move
    #
    # Inc code segment counter
    #
    pop          # ax=0       bx=len-1
    inc          # ax=1       bx=len-1
    toggle       # ax=len-1   bx=1
    pop          # ax=sepIdx  bx=1
  end
  #
  # Splits tail with it's copy to create separate organism
  #
  shift          # ax=?       bx=?
  shift          # ax=sepIdx  bx=foodEnd
  len            # ax=len     bx=foodEnd
  toggle         # ax=foodEnd bx=len
  split
end
#
# Eating function. Randomly change direction and
# eats every organism, which is on the way
#
func             # func 1
  rand           # ax=2       bx=?
  step           # ax=2       bx=?
  toggle         # ax=?       bx=2
  len            # ax=len     bx=2
  toggle         # ax=2       bx=len
  push           # ax=2       bx=len
  1              # ax=0       bx=len
  axret          # ax=1       bx=len    ret=1
  join           # ax=2       bx=len    ret=1
  pop            # ax=2       bx=len
end
#
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# main (entry point). General approach: organism
# sets it's color, 100 times eating and 1 time 
# cloning himself. Repeat all above...
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
255              # ax=255     bx=0 
lshift
lshift
lshift
lshift
lshift
lshift
lshift
lshift           # ax=0xFF00  bx=0
color            # ax=0xFF00  bx=0
100              # ax=100     bx=0
loop
  1              # ax=1       bx=?
  call           # eating
end
#
# This method checks if organism may produce
# it's clone if it has enough food inside.
#
0
call             # try clone
ret              # this is how we disable food segment
nop              # separator between code and food
#
# Here and further food is located
#