#
# In:
#   m0    - back direction
# Out:
#   ax    - 1 - success
#           0 - fail
#
# func0. Cuts the tail
#
func
  load                        # ax=back dir
  dir
  len
  split                       # bx=back dir
  reax                 @mol
end
func
  nop
  nop
  nop
end                    @mol
#
# Sets head0 to the beginnig of replicator
#
0
smol
#
# Create big loop
#
20
toggle
eq
lshift                 @mol   # ax=20971520
loop
  #
  # Step any direction, eat and checks if needed mol
  #
  8
  rand
  dir
  step
  #
  # Store back dir in m0
  #
  toggle               @mol   # bx=dir
  4
  add                         # ax=back dir
  save                        # m0=back dir
  #
  # We should have free space behind for wastes
  #
  reax
  ifp
    eq                 @mol   # ax=dir
    join
    reax                      # ax=ate mol len
    ifp                       # ate something
      #
      # Checks ate mol len
      #
      mol
      toggle                  # ax=molIdx1  bx=molIdx0
      sub              @mol   # ax=cur mol len
      inc
      toggle                  # bx=cur mol len
      #
      # Sets head1 to the last molecule
      #
      len
      sub                     # ax=old code len
      rhead                   # h1
      smol             @mol
      lhead
      reax                    # ax=ate mol len
      #
      # Wrong length. Cut it
      #
      ifne
        #
        # Try to get energy by catabolism
        #
        0
        catab
        #
        # Cut bad molecules
        #
        call           @mol
        ifz
          break
        end
      end
      #
      # Correct len. Check if needed
      #
      ife
        #
        # Compares current mol and eated
        #
        mcmp           @mol
        reax
        ifz
          #
          # Try to get energy by catabolism on every 10th molecule
          #
          10
          rand
          ifz
            catab      @mol
          end
          #
          # wrong mol, cut it
          #
          0
          call
          ifz
            break
          end          @mol
          #
          # Try to assemble needed molecule with anabolism
          #
          10
          rand
          toggle
          3
          #
          # In 20% of cases call anabolism based function
          #
          ifg
            1          @mol
            call
            # check ax here to break the loop
          end
          0
        end
        #
        # Needed mol, just leave it
        #
        ifp                   # needed mol
          #
          # Move h1 to the next mol
          #
          rmol         @mol
          #
          # Checks if this is the end (last replicator mol)
          #
          1
          toggle
          33
          lshift                # ax=66 - nop
          right                 # m1
          save         @mol     # m1=66 - nop
          mol
          toggle                # bx=first atom
          load
          left                  # m0
          ife
            #
            # Loads back dir from m0
            #
            load       @mol
            toggle              # bx=back dir
            17
            save
            break
          end
        end            @mol
      end
    end
  end
end
# TODO: i'm here!!!!
# Cut wastes. The code below is not random. The reason behind
# it, that nop atom should be the first atom in a last molecule.
# Any other molecule must not have it on the beginning
#
63
#
# We have to try cut wastes many times in different places
#
loop                   @mol
  8
  8
  8
  8
  rand
  step                 @mol
  line
  smol
  rmol
  rmol
  rmol
  rmol                 @mol
  reax
  ifn
    break
  end
  len
  split                @mol
  nop                         # separator. must be first atom of last mol
  reax
  ifp
    break
  end
end                    @mol
#
# Food section
#